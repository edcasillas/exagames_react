# https://docs.microsoft.com/en-us/visualstudio/ide/editorconfig-code-style-settings-reference
# https://kent-boogaart.com/blog/editorconfig-reference-for-c-developers

# top-most EditorConfig file
root = true

[*.cs]
end_of_line = crlf
insert_final_newline = false
indent_size = tab
indent_style = tab
tab_width = 4

csharp_indent_block_contents = true
csharp_indent_braces = false
csharp_indent_case_contents = true
csharp_indent_labels = one_less_than_current
csharp_indent_switch_labels = true
csharp_new_line_before_catch = false
csharp_new_line_before_else = false
csharp_new_line_before_finally = false
csharp_new_line_before_members_in_anonymous_types = true
csharp_new_line_before_members_in_object_initializers = true
csharp_new_line_before_open_brace = none
csharp_new_line_between_query_expression_clauses = true
csharp_prefer_braces = false:suggestion
csharp_prefer_simple_default_expression = true:suggestion
csharp_preserve_single_line_blocks = true
csharp_preserve_single_line_statements = true
csharp_space_after_cast = false
csharp_space_after_colon_in_inheritance_clause = true
csharp_space_after_comma = true
csharp_space_after_dot = false
csharp_space_after_keywords_in_control_flow_statements = true
csharp_space_after_semicolon_in_for_statement = true
csharp_space_around_binary_operators = before_and_after
csharp_space_around_declaration_statements = do_not_ignore
csharp_space_before_colon_in_inheritance_clause = true
csharp_space_before_comma = false
csharp_space_before_dot = false
csharp_space_before_open_square_brackets = false
csharp_space_before_semicolon_in_for_statement = false
csharp_space_between_empty_square_brackets = false
csharp_space_between_method_call_empty_parameter_list_parentheses = false
csharp_space_between_method_call_name_and_opening_parenthesis = false
csharp_space_between_method_call_parameter_list_parentheses = false
csharp_space_between_method_declaration_empty_parameter_list_parentheses = false
csharp_space_between_method_declaration_name_and_open_parenthesis = false
csharp_space_between_method_declaration_parameter_list_parentheses = false
csharp_space_between_parentheses = none
csharp_space_between_square_brackets = false

csharp_style_conditional_delegate_call = true:suggestion
csharp_style_expression_bodied_accessors = true:suggestion
csharp_style_expression_bodied_constructors = false:suggestion
csharp_style_expression_bodied_indexers = true:suggestion
csharp_style_expression_bodied_methods = true:suggestion
csharp_style_expression_bodied_operators = true:suggestion
csharp_style_expression_bodied_properties = true:suggestion
csharp_style_inlined_variable_declaration = true:suggestion
csharp_style_pattern_matching_over_as_with_null_check = true:suggestion
csharp_style_pattern_matching_over_is_with_cast_check = true:suggestion
csharp_style_throw_expression = true:suggestion
csharp_style_var_elsewhere = true:suggestion
csharp_style_var_for_built_in_types = true:suggestion
csharp_style_var_when_type_is_apparent = true:suggestion

dotnet_sort_system_directives_first = false
dotnet_style_predefined_type_for_locals_parameters_members = true:suggestion

# === NAMING CONVENTIONS ===

# Style Definitions
dotnet_naming_style.pascal_case_style.capitalization               = pascal_case
dotnet_naming_style.camel_case_style.capitalization                = camel_case
dotnet_naming_style.I_prefix_style.required_prefix                 = I
dotnet_naming_style.I_prefix_style.capitalization                  = pascal_case
dotnet_naming_style.T_prefix_style.required_prefix                 = T
dotnet_naming_style.T_prefix_style.capitalization                  = pascal_case

# Use PascalCase for constant fields
dotnet_naming_rule.constant_fields_should_be_pascal_case.severity  = warning
dotnet_naming_rule.constant_fields_should_be_pascal_case.symbols   = constant_fields
dotnet_naming_rule.constant_fields_should_be_pascal_case.style     = pascal_case_style
dotnet_naming_symbols.constant_fields.applicable_kinds             = field
dotnet_naming_symbols.constant_fields.applicable_accessibilities   = public, internal, protected
dotnet_naming_symbols.constant_fields.required_modifiers           = const

# Use PascalCase for public fields
dotnet_naming_rule.pascal_case_for_public_fields.severity          = warning
dotnet_naming_rule.pascal_case_for_public_fields.symbols           = public_fields
dotnet_naming_rule.pascal_case_for_public_fields.style             = pascal_case_style
dotnet_naming_symbols.public_fields.applicable_kinds               = field
dotnet_naming_symbols.public_fields.applicable_accessibilities     = public, internal, protected

# Interfaces must be PascalCase and have an I prefix
dotnet_naming_rule.interfaces_start_with_I.severity                = warning
dotnet_naming_rule.interfaces_start_with_I.symbols                 = any_interface
dotnet_naming_rule.interfaces_start_with_I.style                   = I_prefix_style
dotnet_naming_symbols.any_interface.applicable_accessibilities     = *
dotnet_naming_symbols.any_interface.applicable_kinds               = interface

# Type parameters must be PascalCase and have a T prefix
dotnet_naming_rule.typeparams_start_with_T.severity                = warning
dotnet_naming_rule.typeparams_start_with_T.symbols                 = any_type_param
dotnet_naming_rule.typeparams_start_with_T.style                   = T_prefix_style
dotnet_naming_symbols.any_type_param.applicable_accessibilities    = *
dotnet_naming_symbols.any_type_param.applicable_kinds              = type_parameter

# Public Async methods should have "Async" suffix
dotnet_naming_rule.public_async_methods_end_in_async.symbols               = public_async_methods
dotnet_naming_rule.public_async_methods_end_in_async.style                 = pascal_end_in_async
dotnet_naming_rule.public_async_methods_end_in_async.severity              = warning

dotnet_naming_symbols.public_async_methods.applicable_kinds            = method
dotnet_naming_symbols.public_async_methods.applicable_accessibilities  = public, internal, protected
dotnet_naming_symbols.public_async_methods.required_modifiers          = async

dotnet_naming_style.pascal_end_in_async.required_prefix                    = 
dotnet_naming_style.pascal_end_in_async.required_suffix                    = Async
dotnet_naming_style.pascal_end_in_async.capitalization                     = pascal_case
dotnet_naming_style.pascal_end_in_async.word_separator                     = 

# Private Async methods should have "Async" suffix
dotnet_naming_rule.private_async_methods_end_in_async.symbols               = private_async_methods
dotnet_naming_rule.private_async_methods_end_in_async.style                 = camel_end_in_async
dotnet_naming_rule.private_async_methods_end_in_async.severity              = warning

dotnet_naming_symbols.private_async_methods.applicable_kinds            = method
dotnet_naming_symbols.private_async_methods.applicable_accessibilities  = private
dotnet_naming_symbols.private_async_methods.required_modifiers          = async

dotnet_naming_style.camel_end_in_async.required_prefix                    = 
dotnet_naming_style.camel_end_in_async.required_suffix                    = Async
dotnet_naming_style.camel_end_in_async.capitalization                     = camel_case
dotnet_naming_style.camel_end_in_async.word_separator                     = 

# public, internal and protected classes, structs, methods, enums, events, properties, namespaces, delegates must be PascalCase
dotnet_naming_rule.general_naming.severity                         = warning
dotnet_naming_rule.general_naming.symbols                          = general
dotnet_naming_rule.general_naming.style                            = pascal_case_style
dotnet_naming_symbols.general.applicable_kinds                     = class,struct,enum,property,method,event,namespace,delegate
dotnet_naming_symbols.general.applicable_accessibilities           = public, internal, protected

# Everything else is camelCase
dotnet_naming_rule.everything_else_naming.severity                 = warning
dotnet_naming_rule.everything_else_naming.symbols                  = everything_else
dotnet_naming_rule.everything_else_naming.style                    = camel_case_style
dotnet_naming_symbols.everything_else.applicable_kinds             = *
dotnet_naming_symbols.everything_else.applicable_accessibilities   = *